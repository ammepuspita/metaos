
symbols = [ 'ABE.MC','ABG.MC','ACS.MC','ACX.MC','ISPA.AS','TEF.MC','TL5.MC',\
            'TRE.MC' ]

#lineProcessor = CSVReutersAdaptative('BRIC_1min.csv')
textFormat = MessageFormat("{0}")
dateFormat = SimpleDateFormat('dd-MMM-yyyy')
timeFormat = SimpleDateFormat('HH:mm:ss.SSS')
doubleFormat = DecimalFormat('#.##')

noAccumulator = ZeroAccumulator()
lineProcessor = CSVLineParser([
    textFormat,dateFormat,timeFormat,None,textFormat,doubleFormat,doubleFormat,\
    doubleFormat,doubleFormat,doubleFormat,doubleFormat,doubleFormat,None,\
    doubleFormat,doubleFormat,doubleFormat,doubleFormat,doubleFormat,\
    doubleFormat,doubleFormat,doubleFormat],\
    [None,None,None,None,None,CLOSE(),VOLUME(),\
     EXTENDED(PRICE,"VWAP"),CLOSE(BID),VOLUME(BID),CLOSE(ASK),VOLUME(ASK),\
     None,EXTENDED(PRICE,"New Price"),EXTENDED(PRICE,"New Vol"),\
     EXTENDED(PRICE,"30 Day ATM IV Call"),EXTENDED(PRICE,"60 Day ATM IV Call"),\
     EXTENDED(PRICE,"90 Day ATM IV Call"),EXTENDED(PRICE,"30 Day ATM IV Put"),\
     EXTENDED(PRICE,"60 Day ATM IV Put"),EXTENDED(PRICE,"90 Day ATM IV Put")],
     0,[1,2])
source = SingleSymbolScanner(fileName, symbols, lineProcessor, noAccumulator)

#
# Stores for each instrument and minute in day, the list of %volumes/dailyVol 
# for each minute.
#
class TraversalCutter(Listener):
    def notify(self, parseResult):
        ss = parseResult.getSymbols()
        moment = parseResult.getTimestamp()
        minute = moment.get(Calendar.HOUR_OF_DAY)*60 \
                + moment.get(Calendar.MINUTE)
        for symbol in ss:
            data[symbol][minute].push(cache.get(moment, VOLUME()))
            # The same as:
            #data[symbol][minute].push(parseResult.values(symbol).get(VOLUME()))


traversalCutter = TraversalCutter()
noAccumulator.addListener(traversalCutter)

print "Go!"

source.run()

